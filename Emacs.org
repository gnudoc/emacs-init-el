#+title: Emacs From Scratch config
#+PROPERTY: header-args:emacs-lisp :tangle ./init.el :mkdirp yes

* Preamble
#+begin_src emacs-lisp
  ;; Note that init.el is generated from ./Emacs.org - that is the file that should be editted.
#+end_src

* Package System Setup
I'm using the [[https://github.com/jwiegley/use-package][use-package]] system with elpa and melpa.
#+begin_src emacs-lisp

    ;; Initialize package sources
    (setq package-archives '(("melpa" . "https://melpa.org/packages/")
                             ("org" . "https://orgmode.org/elpa/")
                             ("elpa" . "https://elpa.gnu.org/packages/")))

    ;; Initialize package system, but defer refreshing contents to avoid startup delays.
    ;; We can run M-x package-refresh-contents manually when needed.
    (package-initialize)

    ;; Ensure 'use-package' is installed and loaded
    (unless (package-installed-p 'use-package)
      (package-refresh-contents) ; Refresh before installing use-package if it's new
      (package-install 'use-package))
    (eval-when-compile
      (require 'use-package))
    
    ;; Only enable 'always-ensure' when Emacs is running interactively.
    ;; In batch mode (like for tests), we assume packages are already installed.
    ;;(when (called-interactively-p 'any) 
     (setq use-package-always-ensure t)
    ;;)
#+end_src

* Basic UI Config
Make default font sizes in case we want them. Hide away some UI elements that we don't want, like the scroll-bar, tool-bar, tooltips and menu-bar.
#+begin_src emacs-lisp
        ;; alpha 100 is opaque, alpha 0 is fully transparent
        (add-to-list 'default-frame-alist '(alpha-background . 100))

        ;; start every frame maximized
        (add-to-list 'default-frame-alist '(fullscreen . maximized))

        ;; You will most likely need to adjust these font sizes for your system
        (defvar nij/default-font-size 120)
        (defvar nij/default-variable-font-size 120)

        (setq inhibit-startup-message t)

        (scroll-bar-mode -1)        ; Disable visible scrollbar
        (tool-bar-mode -1)          ; Disable the toolbar
        (tooltip-mode -1)           ; Disable tooltips
        (set-fringe-mode 10)        ; Give some breathing room
        (menu-bar-mode -1)            ; Disable the menu bar - comment this if you're not confident with keybindings yet

        ;; Set up the visible bell
        (setq visible-bell t)

        (column-number-mode)
        (global-display-line-numbers-mode t)

        ;; Disable line numbers for some modes
        (dolist (mode '(org-mode-hook
                        term-mode-hook
                        shell-mode-hook
                        eshell-mode-hook
                        vterm-mode-hook
                        eww-mode-hook
  		      pdf-view-mode-hook))
          (add-hook mode (lambda () (display-line-numbers-mode 0))))

#+end_src

** Font config
[[https://github.com/tonsky/FiraCode][Firacode]] and [[https://fonts.google.com/specimen/Cantarell][Cantarell]] are useful fonts to have. You need them on the system before running emacs with this config.
#+begin_src emacs-lisp

  ;;(set-face-attribute 'default nil :font "Fira Code Retina" :height nij/default-font-size)
  (set-face-attribute 'default nil :font "FiraCode Nerd Font") ;;another slightly lighter-weight version

  ;; Set the fixed pitch face
  (set-face-attribute 'fixed-pitch nil :font "FiraCode Nerd Font" :height 130)

  ;; Set the variable pitch face
  (set-face-attribute 'variable-pitch nil :font "Cantarell" :height 140 :weight 'regular)

#+end_src

* Keybinding Config
There is nothing in this section just now, but things like [[https://evil.readthedocs.io/en/latest/index.html][evil-mode]] and [[https://github.com/noctuid/general.el][general]] could go here.
* More UI and UX Config
Theming, Completion and Help stuff
** Colour Theme
Look at lots of [[https://github.com/hlissner/emacs-doom-themes][doom-themes]] here. =M-x counsel-load-theme= should also help.
#+begin_src emacs-lisp

  (use-package doom-themes
    :init (load-theme 'doom-dracula t))

#+end_src

** Modeline
Another element of doom emacs that's nice is the [[https://github.com/seagle0128/doom-modeline][modeline]]. It also has a bunch of its own config options. On first run you'll need to do =M-x all-the-icons-install-fonts=
#+begin_src emacs-lisp

(use-package doom-modeline
  :after (all-the-icons nerd-icons) ; Explicitly declare dependencies
  :init (doom-modeline-mode 1)
  :custom ((doom-modeline-height 15)))

(use-package all-the-icons) ; Now load them to make them available
(use-package nerd-icons)

#+end_src

** Which Key
[[https://github.com/justbur/emacs-which-key][which-key]] offers all possible completions for any key prefix
#+begin_src emacs-lisp

  (use-package which-key
    :init (which-key-mode)
    :diminish which-key-mode
    :config
    (setq which-key-idle-delay 0.5)
  ;; Add this temporary debug line:
  (message "which-key-idle-delay in batch: %S" which-key-idle-delay))

#+end_src

** Ivy and Counsel
[[https://oremacs.com/swiper/][Ivy]] is a completion framework. Counsel is a part of it - customised commands to replace various inbuilt commands like find-file, to use the completion framework. [[https://github.com/Yevgnen/ivy-rich][ivy-rich]] adds more useful stuff to the counsel commands. I haven't yet decided if I might ever want some vim-like keybindings for ivy.
#+begin_src emacs-lisp

  (use-package ivy
    :diminish
    :config
    (ivy-mode 1))

  (use-package ivy-rich
    :init
    (ivy-rich-mode 1))

  (use-package counsel
    :bind (("M-x" . counsel-M-x)
           ("C-x b" . counsel-ibuffer)
           ("C-x C-f" . counsel-find-file)
           :map minibuffer-local-map
           ("C-r" . 'counsel-minibuffer-history))
    :config (counsel-mode 1))

#+end_src

** Helpful
[[https://github.com/Wilfred/helpful][Helpful]] adds more helpful info to the =describe-*= buffers. eg the source code of functions.
#+begin_src emacs-lisp

  (use-package helpful
    :custom
    (counsel-describe-function-function #'helpful-callable)
    (counsel-describe-variable-function #'helpful-variable)
    :bind
    ([remap describe-function] . counsel-describe-function)
    ([remap describe-command] . helpful-command)
    ([remap describe-variable] . counsel-describe-variable)
    ([remap describe-key] . helpful-key))

#+end_src

* Org Mode
The famous and magic [[https://orgmode.org][Org Mode]]. All sorts of functions. Rich document editing, project planning, task/time tracking, literate coding (long before Jupyter notebooks), blogging engine, and more.
** Fonts
#+begin_src emacs-lisp

  (defun nij/org-font-setup ()
    ;; Replace list hyphen with dot
    (font-lock-add-keywords 'org-mode
                            '(("^ *\\([-]\\) "
                               (0 (prog1 () (compose-region (match-beginning 1) (match-end 1) "•"))))))

    ;; Set faces for heading levels
    (dolist (face '((org-level-1 . 1.2)
                    (org-level-2 . 1.1)
                    (org-level-3 . 1.05)
                    (org-level-4 . 1.0)
                    (org-level-5 . 1.0)
                    (org-level-6 . 1.0)
                    (org-level-7 . 1.0)
                    (org-level-8 . 1.0)))
      (set-face-attribute (car face) nil :font "Cantarell" :weight 'regular :height (cdr face)))

    ;; Ensure that anything that should be fixed-pitch in Org files appears that way
    (set-face-attribute 'org-block nil :foreground nil :inherit 'fixed-pitch)
    (set-face-attribute 'org-code nil   :inherit '(shadow fixed-pitch))
    (set-face-attribute 'org-table nil   :inherit '(shadow fixed-pitch))
    (set-face-attribute 'org-verbatim nil :inherit '(shadow fixed-pitch))
    (set-face-attribute 'org-special-keyword nil :inherit '(font-lock-comment-face fixed-pitch))
    (set-face-attribute 'org-meta-line nil :inherit '(font-lock-comment-face fixed-pitch))
    (set-face-attribute 'org-checkbox nil :inherit 'fixed-pitch))

#+end_src

** Basic  Config
There's loads more you could do, eg for org-agenda. see systemcrafters emacs-from-scratch for examples.
#+begin_src emacs-lisp

  (defun nij/org-mode-setup ()
    (org-indent-mode)
    (variable-pitch-mode 1)
    (visual-line-mode 1)

   ;; Ensure org-superstar-mode is enabled here if you want to use it for priority display
    ;; org-superstar-mode uses org-pretty-entities behind the scenes for this.
    (org-superstar-mode 1)) ; Enable org-superstar-mode

  ;; Define your custom TODO keywords
  ;; 'SEQUENCE' is the name of this particular keyword sequence.
  ;; Add URGENT and WAITING as TODO states.
  ;; Add CANCELLED as a DONE state.
  (setq org-todo-keywords
        '(("TODO(t!)" "WAITING(w@/!)" "URGENT(u!)" "|" "DONE(d!)" "CANCELLED(c@)")))

  ;; Explanation of the syntax:
  ;; t: quick access key (type `t` to select TODO)
  ;; !: automatically insert a timestamp when the state changes to this keyword.
  ;; @: automatically insert a timestamp when the state changes from this keyword.
  ;; |: separates TODO states from DONE states.
  ;; g: group keywords (e.g., ("URGENT(u!)" "NEXT(n)" "PROJ(p)" | "DONE(d!)" "CANC(c@)"))
  ;;   Keywords within the same group (parentheses) are in an exclusive set.

  ;; Define your custom priority characters (single characters)
  ;; These are the internal characters Org Mode uses.
  (setq org-priority-correspondence '(?C ?I ?N ?M)) ; C for Critical, I for Important, N for Nice, Maybe

  ;; Define how these priority characters should be displayed.
  ;; This is a list of associations: (character . "display string")
  (setq org-priority-properties
        '(
          (?C . "Critical")
          (?I . "Important")
          (?N . "Nice to have")
          (?M . "Maybe")
          ))

  (use-package org
    :hook (org-mode . nij/org-mode-setup)
    :config
    (setq org-ellipsis " ▾")
    (nij/org-font-setup))

#+end_src

** Bullets
[[https://github.com/sabof/org-bullets][org-bullets]] lets us have nice looking bullet list markers instead of multiple **.
#+begin_src emacs-lisp

  (use-package org-bullets
    :after org
    :hook (org-mode . org-bullets-mode)
    :custom
    (org-bullets-bullet-list '("◉" "○" "●" "○" "●" "○" "●")))

#+end_src

** Org Superstar
Use org-superstar for enhanced display, including custom priorities.
#+begin_src emacs-lisp
(use-package org-superstar
  :hook (org-mode . org-superstar-mode)
  :custom
  ;; Enable display of custom priority strings
  (org-superstar-prettify-item-priority t)
  ;; org-superstar-mode also handles headline bullets by default, but you already have org-bullets.
  ;; If you prefer org-superstar's bullets, you might set:
  ;; (org-superstar-headline-bullets-list '("◉" "○" "●" "○" "●" "○" "●"))
  ;; Or if you prefer org-bullets for bullets and only org-superstar for priorities:
  ;; (setq org-superstar-special-block-types nil) ; Disable block prettification
  ;; (setq org-superstar-special-todo-keywords nil) ; Disable TODO keyword prettification if org-superstar does it too
  )(use-package org-superstar
  :hook (org-mode . org-superstar-mode)
  :custom
  ;; Enable display of custom priority strings
  (org-superstar-prettify-item-priority t)
  ;; Crucial: Tell org-pretty-entities to apply to priorities.
  ;; org-superstar often sets this up, but explicit is better for custom cases.
  ;; We ensure that org-pretty-entities-include-regexp includes priorities.
  ;; This might be handled by `org-superstar-prettify-item-priority` internally,
  ;; but sometimes explicit definition of the characters helps.
  ;; A more direct way to ensure prettification is via `org-superstar-prettifiers`
  (setq org-superstar-prettifiers
        (list
         '(org-superstar-priority-prettifier . org-superstar-prettify-priority)
         ;; Add other default prettifiers if org-superstar clears them.
         ;; e.g., '(org-superstar-bullet-prettifier . org-superstar-prettify-bullet)
         ))
  ;; And confirm priority faces (even if nil) so org-superstar uses `org-priority-properties`
  (setq org-superstar-priority-faces nil) ; Setting to nil makes it use `org-priority-properties`

  ;; org-superstar-mode also handles headline bullets by default, but you already have org-bullets.
  ;; If you prefer org-superstar's bullets, you might set:
  ;; (org-superstar-headline-bullets-list '("◉" "○" "●" "○" "●" "○" "●"))
  ;; Or if you prefer org-bullets for bullets and only org-superstar for priorities:
  ;; (setq org-superstar-special-block-types nil) ; Disable block prettification
  ;; (setq org-superstar-special-todo-keywords nil) ; Disable TODO keyword prettification if org-superstar does it too
  )
#+end_src
** Visual centring of org buffer
We use [[https://github.com/joostkremers/visual-fill-column][visual-fill-column]] here. The column width will need to be changed for different screens
#+begin_src emacs-lisp

  (defun nij/org-mode-visual-fill ()
    (setq visual-fill-column-width 250
          visual-fill-column-center-text t)
    (visual-fill-column-mode 1))

  (use-package visual-fill-column
    :hook (org-mode . nij/org-mode-visual-fill))

#+end_src

** Configure Babel Languages
Add a list item to org-babel-load-languages for each language we want to do code blocks for. The conf-unix line lets us do key-value pairs (eg meaning=42) which a lot of *nix programs use for config.
More info [[https://orgmode.org/worg/org-contrib/babel/languages.html][here]].
#+begin_src emacs-lisp

    (org-babel-do-load-languages
      'org-babel-load-languages
      '((emacs-lisp . t)
        (python . t)
        (haskell . t)))

    (push '("conf-unix" . conf-unix) org-src-lang-modes)

#+end_src

** Structure Templates
This allows you to type <el then TAB or <py then TAB and so on to get code blocks inserted into org docs. You can even use it for the custom bits like :tangle or :mkdirp if needed.
More [[https://orgmode.org/manual/Structure-Templates.html][here]].
#+begin_src emacs-lisp

  (require 'org-tempo)
  (add-to-list 'org-structure-template-alist '("sh" . "src shell"))
  (add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
  (add-to-list 'org-structure-template-alist '("hs" . "src haskell"))

#+end_src

** Auto-tangle Config Files
Any time an org-mode buffer gets saved, our function gets run. If the org-mode file being saved is this one, then the code snippets are all sent to their respective files.
#+begin_src emacs-lisp

  ;; Automatically tangle our Emacs.org config file when we save it
  (defun nij/org-babel-tangle-config ()
    (when (string-equal (buffer-file-name)
                        (expand-file-name "~/.emacs.d/Emacs.org"))
      ;; Dynamic scoping example
      (let ((org-confirm-babel-evaluate nil))
        (org-babel-tangle))))
  (add-hook 'org-mode-hook (lambda () (add-hook 'after-save-hook #'nij/org-babel-tangle-config)))

#+end_src

* Dev stuff
** Useful keybinds for C++
So far just C-c c bound to M-x compile and C-c s
#+begin_src emacs-lisp
  (add-hook 'c++-mode-hook
            (lambda ()
              (local-set-key (kbd "C-c c") 'compile)))


  (defun shell-other-window ()
  "Open a 'shell' in a new window."
  (interactive)
  (let ((buf (shell)))
    (switch-to-buffer (other-buffer buf))
    (switch-to-buffer-other-window buf))
  )

  (add-hook 'c++-mode-hook
          (lambda ()
            (local-set-key (kbd "C-c s") 'shell-other-window)))

#+end_src
** Useful keybinds for Java
This should also bind C-c c to M-x compile. At some point I need to write the elisp to do java <classname>
#+begin_src emacs-lisp
    (add-hook 'java-mode-hook
  	  (lambda ()
  	    (local-set-key [3 99] 'compile)))

#+end_src
** Languages
*** Tree-sitter language grammar
The command M-x treesit-install-language-grammar will install a language grammar for tree-sitter, but you have to point it at the grammar using the following variable. =https://www.masteringemacs.org/article/how-to-get-started-tree-sitter= for more.
#+begin_src emacs-lisp
  (setq treesit-language-source-alist
     '((bash "https://github.com/tree-sitter/tree-sitter-bash")
       (c "https://github.com/tree-sitter/tree-sitter-c")
       (cpp "https://github.com/tree-sitter/tree-sitter-cpp")
       (cmake "https://github.com/uyha/tree-sitter-cmake")
       (css "https://github.com/tree-sitter/tree-sitter-css")
       (elisp "https://github.com/Wilfred/tree-sitter-elisp")
       (go "https://github.com/tree-sitter/tree-sitter-go")
       (haskell "https://github.com/tree-sitter/tree-sitter-haskell")
       (html "https://github.com/tree-sitter/tree-sitter-html")
       (java "https://github.com/tree-sitter/tree-sitter-java")
       (javascript "https://github.com/tree-sitter/tree-sitter-javascript" "master" "src")
       (json "https://github.com/tree-sitter/tree-sitter-json")
       (make "https://github.com/alemuller/tree-sitter-make")
       (markdown "https://github.com/ikatyang/tree-sitter-markdown")
       (php "https://github.com/tree-sitter/tree-sitter-php")
       (python "https://github.com/tree-sitter/tree-sitter-python")
       (regex "https://github.com/tree-sitter/tree-sitter-regex")
       (rust "https://github.com/tree-sitter/tree-sitter-rust")
       (toml "https://github.com/tree-sitter/tree-sitter-toml")
       (tsx "https://github.com/tree-sitter/tree-sitter-typescript" "master" "tsx/src")
       (typescript "https://github.com/tree-sitter/tree-sitter-typescript" "master" "typescript/src")
       (yaml "https://github.com/ikatyang/tree-sitter-yaml")))
#+end_src
*** Haskell
Try M-x haskell-mode
#+begin_src emacs-lisp
  (use-package haskell-mode)
#+end_src
*** Eglot-related config
This section is a placeholder for future Eglot configurations.
You can add your eglot setup here as you explore it for C++, Haskell, Python, etc.
For example, to enable Eglot for Haskell, C++, java and python:
#+begin_src emacs-lisp
    (use-package eglot
      :hook (
             (haskell-mode . eglot-ensure) ; Auto-start Eglot in Haskell buffers
             (c++-mode . eglot-ensure)    ; Auto-start Eglot in C++ buffers
             (java-mode . eglot-ensure)   ; Auto-start Eglot in Java buffers
             (python-mode . eglot-ensure) ; Auto-start Eglot in Python buffers
             )
      :config
      (setq eglot-autoshutdown nil) ; Keep this nil for testing persistence
      (setq eglot-connect-timeout 60) ; Give HLS plenty of time to start
      (setq eglot-stay-alive t) ; Crucial: Tell Eglot to try and keep the server process alive


    ;; ABSOLUTELY EXPLICIT DEFINITION for haskell-mode:
    ;; Use `setq` to override any default `eglot-server-programs` that might be present.
    ;; Use the full, absolute path to haskell-language-server-wrapper.
    ;; The program and its arguments must be a LIST of strings.
    (setq eglot-server-programs
          '(
            (haskell-mode . ("/home/nij/.ghcup/bin/haskell-language-server-wrapper" "--lsp"))
            ;; Add other language modes here following the same pattern:
            (c++-mode . ("/usr/bin/clangd")) ; Assuming clangd is in PATH
            (java-mode . ("jdtls")) ; Example
            (python-mode . ("python3" "-m" "pylsp")) ; Example
           ))

    ;; For debugging: verbose logging
    (setq eglot-debug t) ; <--- Let's turn this ON to get more verbose logs


      ;; Optional: More aggressive server restart if it dies
      (setq eglot-auto-server-display nil) ; Don't auto-display server buffer on restart
      (setq eglot-reconnect-on-change t) ; Attempt reconnect if source file changes
      
      ;; Configure how Eglot displays information
      (setq eglot-autodocument t) ; Show documentation when cursor hovers
      (setq eglot-autodocument-delay 0.5) ; Delay for documentation hover
      (setq eglot-display-buffer-function #'eglot-display-buffer-at-bottom) ; Show Eglot buffers at bottom

    )
#+end_src
** Company mode
For nicer than completion-at-point
#+begin_src emacs-lisp

  (use-package company
    ;;:after lsp-mode
    ;;:hook (lsp-mode . company-mode)
    ;;:bind (:map company-active-map
    ;;       ("<tab>" . company-complete-selection))
    ;;      (:map lsp-mode-map
    ;;       ("<tab>" . company-indent-or-complete-common))
    :init
    (global-company-mode)
    :custom
    (company-minimum-prefix-length 1)
    (company-idle-delay 0.0))

  (use-package company-box
    :hook (company-mode . company-box-mode))

#+end_src

** Projectile
#+begin_src emacs-lisp

  (use-package projectile
    :diminish projectile-mode
    :config (projectile-mode)
    :custom ((projectile-completion-system 'ivy))
    :bind-keymap
    ("C-c p" . projectile-command-map)
    :init
    ;; NOTE: Set this to the folder containing Git and other code repos!
    (when (file-directory-p "~/Projects/Code")
      (setq projectile-project-search-path '("~/Projects/Code")))
    (setq projectile-switch-project-action #'projectile-dired))

  (use-package counsel-projectile
    :config (counsel-projectile-mode))

#+end_src

** Magit
#+begin_src emacs-lisp

  (use-package magit
    :ensure t
    :custom
    (magit-display-buffer-function #'magit-display-buffer-same-window-except-diff-v1))

  ;; NOTE: Make sure to configure a GitHub token before using this package!
  ;; - https://magit.vc/manual/forge/Token-Creation.html#Token-Creation
  ;; - https://magit.vc/manual/ghub/Getting-Started.html#Getting-Started
  (use-package forge :ensure t)

  (use-package ssh-agency
  :ensure t
  :config
  ;; This line is crucial to make it actually do something
  ;; It ensures the agent is running and keys are added when needed.
  (ssh-agency-ensure)

  ;; Optional: Customize keys to add
  (setq ssh-agency-keys (list "~/.ssh/id_ed25519_github"))
  )
#+end_src

** Rainbow Delimiters
#+begin_src emacs-lisp

  (use-package rainbow-delimiters
    :hook (prog-mode . rainbow-delimiters-mode))

#+end_src
** PATH
#+begin_src emacs-lisp
  (use-package exec-path-from-shell
  :ensure t
  :config
  (when (memq window-system '(mac ns x))
    (exec-path-from-shell-initialize)))

#+end_src
* File Management
** Dired
Some slight customisation of the awesome built-in dired; note the :ensure nil line which means use-package won't try to install it. Consider dired-single if you get annoyed by the multiple dired buffers. Consider dired-open if you want to use dired to open files in external programs like feh (images), mpv (movies) etc.

#+begin_src emacs-lisp
    (use-package dired
      :ensure nil
      :commands (dired dired-jump)
      :custom ((dired-listing-switches "-alh --group-directories-first")
  	     (wdired-allow-to-change-permissions t)))

    (use-package all-the-icons-dired
      ;:hook (dired-mode . all-the-icons-dired-mode)
      )

    (use-package dired-hide-dotfiles
      ;:hook (dired-mode . dired-hide-dotfiles-mode)
      )

    (add-hook 'dired-load-hook
    	  (lambda ()
    	    (load "dired-x")))
#+end_src
* PDF Tools
This is from https://github.com/vedang/pdf-tools
#+begin_src emacs-lisp
  (use-package pdf-tools
    :defer t
    :commands (pdf-loader-install)
    :mode "\\.pdf\\'"
    :bind (:map pdf-view-mode-map
                ("C-=" . pdf-view-enlarge)
                ("C--" . pdf-view-shrink))
    :init (pdf-loader-install)
    :config
    ;; Use `setq` and `regexp-quote` to properly add to revert-without-query
    (setq revert-without-query (concat "\\(" (regexp-quote ".pdf") "\\|.*\\.pdf\\.lock\\)")))

  (defun nij/pdf-view-midnight-mode-setup ()
    "Enable pdf-view-midnight-minor-mode in pdf-view-mode."
    (pdf-view-midnight-minor-mode 1))

  (add-hook 'pdf-view-mode-hook 'nij/pdf-view-midnight-mode-setup)
#+end_src
* LaTeX
#+begin_src emacs-lisp
   (use-package auctex
   :config
   ;; to use pdfview with auctex
   (setq TeX-view-program-selection '(((output-dvi has-no-display-manager) "dvi2tty")
                                      ((output-dvi style-pstricks) "dvips and gv")
                                      (output-dvi "xdvi")
                                      (output-pdf "PDF Tools")
                                      (output-html "xdg-open"))
     TeX-view-program-list '(("PDF Tools" TeX-pdf-tools-sync-view))
     TeX-source-correlate-start-server t) ;; not sure if last line is neccessary

   ;; to have the buffer refresh after compilation
   (add-hook 'TeX-after-compilation-finished-functions
         #'TeX-revert-document-buffer))
#+end_src
* Vterm
#+begin_src emacs-lisp
  (use-package vterm
  :config
  (setq shell-file-name "/bin/bash"
        vterm-max-scrollback 5000))
#+end_src
* Other things
** At some point, I should try and get EMMS or similar working.
** I'd also like to experiment with EXWM.
** Set up an init.el that works reasonably well on windows as well as linux (or perhaps a separate init for windows?)
** DONE Set up IDE-like features for C++
** Lazy loading with :defer, :demand, :commands
** use use-package more consistently
*** should I do (use-package emacs)
*** should I double-check the :ensure statements? Probably.
** DONE get TODO done
** [#C] get priorities working
